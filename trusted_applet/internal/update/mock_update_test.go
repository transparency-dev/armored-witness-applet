// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/transparency-dev/armored-witness-applet/trusted_applet/internal/update (interfaces: Local,Remote,FirmwareVerifier)

package update_test

import (
	reflect "reflect"

	semver "github.com/coreos/go-semver/semver"
	gomock "github.com/golang/mock/gomock"
	firmware "github.com/transparency-dev/armored-witness-applet/trusted_applet/internal/firmware"
)

// MockLocal is a mock of Local interface.
type MockLocal struct {
	ctrl     *gomock.Controller
	recorder *MockLocalMockRecorder
}

// MockLocalMockRecorder is the mock recorder for MockLocal.
type MockLocalMockRecorder struct {
	mock *MockLocal
}

// NewMockLocal creates a new mock instance.
func NewMockLocal(ctrl *gomock.Controller) *MockLocal {
	mock := &MockLocal{ctrl: ctrl}
	mock.recorder = &MockLocalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocal) EXPECT() *MockLocalMockRecorder {
	return m.recorder
}

// GetInstalledVersions mocks base method.
func (m *MockLocal) GetInstalledVersions() (semver.Version, semver.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledVersions")
	ret0, _ := ret[0].(semver.Version)
	ret1, _ := ret[1].(semver.Version)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstalledVersions indicates an expected call of GetInstalledVersions.
func (mr *MockLocalMockRecorder) GetInstalledVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledVersions", reflect.TypeOf((*MockLocal)(nil).GetInstalledVersions))
}

// InstallApplet mocks base method.
func (m *MockLocal) InstallApplet(arg0 firmware.Bundle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallApplet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallApplet indicates an expected call of InstallApplet.
func (mr *MockLocalMockRecorder) InstallApplet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallApplet", reflect.TypeOf((*MockLocal)(nil).InstallApplet), arg0)
}

// InstallOS mocks base method.
func (m *MockLocal) InstallOS(arg0 firmware.Bundle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallOS", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallOS indicates an expected call of InstallOS.
func (mr *MockLocalMockRecorder) InstallOS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallOS", reflect.TypeOf((*MockLocal)(nil).InstallOS), arg0)
}

// MockRemote is a mock of Remote interface.
type MockRemote struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteMockRecorder
}

// MockRemoteMockRecorder is the mock recorder for MockRemote.
type MockRemoteMockRecorder struct {
	mock *MockRemote
}

// NewMockRemote creates a new mock instance.
func NewMockRemote(ctrl *gomock.Controller) *MockRemote {
	mock := &MockRemote{ctrl: ctrl}
	mock.recorder = &MockRemoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemote) EXPECT() *MockRemoteMockRecorder {
	return m.recorder
}

// GetApplet mocks base method.
func (m *MockRemote) GetApplet() (firmware.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplet")
	ret0, _ := ret[0].(firmware.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplet indicates an expected call of GetApplet.
func (mr *MockRemoteMockRecorder) GetApplet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplet", reflect.TypeOf((*MockRemote)(nil).GetApplet))
}

// GetLatestVersions mocks base method.
func (m *MockRemote) GetLatestVersions() (semver.Version, semver.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersions")
	ret0, _ := ret[0].(semver.Version)
	ret1, _ := ret[1].(semver.Version)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestVersions indicates an expected call of GetLatestVersions.
func (mr *MockRemoteMockRecorder) GetLatestVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersions", reflect.TypeOf((*MockRemote)(nil).GetLatestVersions))
}

// GetOS mocks base method.
func (m *MockRemote) GetOS() (firmware.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOS")
	ret0, _ := ret[0].(firmware.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOS indicates an expected call of GetOS.
func (mr *MockRemoteMockRecorder) GetOS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOS", reflect.TypeOf((*MockRemote)(nil).GetOS))
}

// MockFirmwareVerifier is a mock of FirmwareVerifier interface.
type MockFirmwareVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockFirmwareVerifierMockRecorder
}

// MockFirmwareVerifierMockRecorder is the mock recorder for MockFirmwareVerifier.
type MockFirmwareVerifierMockRecorder struct {
	mock *MockFirmwareVerifier
}

// NewMockFirmwareVerifier creates a new mock instance.
func NewMockFirmwareVerifier(ctrl *gomock.Controller) *MockFirmwareVerifier {
	mock := &MockFirmwareVerifier{ctrl: ctrl}
	mock.recorder = &MockFirmwareVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirmwareVerifier) EXPECT() *MockFirmwareVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockFirmwareVerifier) Verify(arg0 firmware.Bundle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockFirmwareVerifierMockRecorder) Verify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockFirmwareVerifier)(nil).Verify), arg0)
}
