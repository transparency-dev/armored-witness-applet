steps:
  # First create a fake tag we'll use throughout the CI build process below.
  # Unfortunately, GCB has no concept of dynamically creating substitutions or
  # passing ENV vars between steps, so the best we can do is to create a file
  # containing our tag in the share workspace which other steps can inspect.
  - name: bash
    script: |
      date +'0.2.%s-incompatible' > /workspace/fake_tag
      cat /workspace/fake_tag
  ### Build the Trusted Applet and upload it to GCS.
  # Build an image containing the trusted applet artifacts with the Dockerfile.
  # This step needs to be a bash script in order to substitute fake tag into a
  # build arg.
  - name: gcr.io/cloud-builders/docker
    entrypoint: bash
    args:
      - -c 
      - |
        docker build \
        --build-arg=TAMAGO_VERSION=${_TAMAGO_VERSION} \
        --build-arg=FT_LOG_URL=${_LOG_BASE_URL} \
        --build-arg=FT_BIN_URL=${_BIN_BASE_URL} \
        --build-arg=LOG_ORIGIN=${_ORIGIN} \
        --build-arg=LOG_PUBLIC_KEY=${_LOG_PUBLIC_KEY} \
        --build-arg=APPLET_PUBLIC_KEY=${_APPLET_PUBLIC_KEY} \
        --build-arg=OS_PUBLIC_KEY1=${_OS_PUBLIC_KEY1} \
        --build-arg=OS_PUBLIC_KEY2=${_OS_PUBLIC_KEY2} \
        --build-arg=GIT_SEMVER_TAG=$(cat /workspace/fake_tag) \
        -t builder-image \
        .
  # Prepare a container with a copy of the artifacts.
  - name: gcr.io/cloud-builders/docker
    args:
      - create
      - --name
      - builder_scratch
      - builder-image
  # Copy the artifacts from the container to the Cloud Build VM.
  - name: gcr.io/cloud-builders/docker
    args:
      - cp
      - builder_scratch:/build/bin
      - output
  # List the artifacts.
  - name: bash
    args:
      - ls
      - output
  ### Construct log entry / Claimant Model statement.
  # This step needs to be a bash script in order to substitute the fake take
  # in the command args.
  - name: golang
    entrypoint: bash
    args:
      - -c
      - |
        go run github.com/transparency-dev/armored-witness/cmd/manifest@${_ARMORED_WITNESS_REPO_VERSION} \
        create \
        --git_tag=$(cat /workspace/fake_tag) \
        --git_commit_fingerprint=${COMMIT_SHA} \
        --firmware_file=output/trusted_applet.elf \
        --firmware_type=TRUSTED_APPLET \
        --tamago_version=${_TAMAGO_VERSION} \
        --raw \
        --output_file=output/trusted_applet_manifest_unsigned.json
  # Sign the log entry.
  - name: golang
    args:
      - go
      - run
      - github.com/transparency-dev/armored-witness/cmd/sign@${_ARMORED_WITNESS_REPO_VERSION}
      - --project_name=${PROJECT_ID}
      - --release=prod
      - --artefact=applet
      - --manifest_file=output/trusted_applet_manifest_unsigned.json
      - --output_file=output/trusted_applet_manifest
  # Print the content of the signed manifest.
  - name: bash
    args:
      - cat
      - output/trusted_applet_manifest
substitutions:
  # Build-related.
  _ARMORED_WITNESS_REPO_VERSION: e7141b6db638c3a2cb23e354cedd2d2980d0fb3a
  _TAMAGO_VERSION: '1.21.3'
  # Log-related.
  _ORIGIN: transparency.dev/armored-witness/firmware_transparency/prod/0
  _LOG_PUBLIC_KEY: transparency.dev-aw-ftlog-prod+1d0792e5+Aa3qdhefd2cc/98jV3blslJT2L+iFR8WKHeGcgFmyjnt
  _APPLET_PUBLIC_KEY: transparency.dev-aw-applet-prod+f022187a+AZSnFa8GxH+jHV6ahELk6peqVObbPKrYAdYyMjrzNF35
  _OS_PUBLIC_KEY1: transparency.dev-aw-os-prod+03170554+AV7mmRamQp6VC9CutzSXzqtNhYNyNmQQRcLX07F6qlC1
  _OS_PUBLIC_KEY2: TODO
