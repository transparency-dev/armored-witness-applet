steps:
  # First create a fake tag we'll use throughout the CI build process below.
  # Unfortunately, GCB has no concept of dynamically creating substitutions or
  # passing ENV vars between steps, so the best we can do is to create a file
  # containing our tag in the share workspace which other steps can inspect.
  - name: bash
    script: |
      date +'0.2.%s-incompatible' > /workspace/fake_tag
      cat /workspace/fake_tag
  ### Build the Trusted Applet and upload it to GCS.
  # Build an image containing the trusted applet artifacts with the Dockerfile.
  # This step needs to be a bash script in order to substitute fake tag into a
  # build arg.
  - name: gcr.io/cloud-builders/docker
    entrypoint: bash
    args:
      - -c 
      - |
        docker build \
          --build-arg=TAMAGO_VERSION=${_TAMAGO_VERSION} \
          --build-arg=FT_LOG_ORIGIN=${_ORIGIN} \
          --build-arg=FT_LOG_URL=${_LOG_BASE_URL} \
          --build-arg=FT_BIN_URL=${_BIN_BASE_URL} \
          --build-arg=LOG_PUBLIC_KEY=${_LOG_PUBLIC_KEY} \
          --build-arg=APPLET_PUBLIC_KEY=${_APPLET_PUBLIC_KEY} \
          --build-arg=OS_PUBLIC_KEY1=${_OS_PUBLIC_KEY1} \
          --build-arg=OS_PUBLIC_KEY2=${_OS_PUBLIC_KEY2} \
          --build-arg=GIT_SEMVER_TAG=$(cat /workspace/fake_tag) \
          -t builder-image \
          .
  # Prepare a container with a copy of the artifacts.
  - name: gcr.io/cloud-builders/docker
    args:
      - create
      - --name
      - builder_scratch
      - builder-image
  # Copy the artifacts from the container to the Cloud Build VM.
  - name: gcr.io/cloud-builders/docker
    args:
      - cp
      - builder_scratch:/build/bin
      - output
  # List the artifacts.
  - name: bash
    args:
      - ls
      - output
  # Copy the artifacts from the Cloud Build VM to GCS.
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        gcloud storage cp \
          output/trusted_applet.elf \
          gs://${_FIRMWARE_BUCKET}/$(sha256sum output/trusted_applet.elf | cut -f1 -d" ")
  ### Construct log entry / Claimant Model statement.
  # This step needs to be a bash script in order to substitute the fake take
  # in the command args.
  - name: golang
    entrypoint: bash
    args:
      - -c
      - |
        go run github.com/transparency-dev/armored-witness/cmd/manifest@${_ARMORED_WITNESS_REPO_VERSION} \
          create \
          --git_tag=$(cat /workspace/fake_tag) \
          --git_commit_fingerprint=${COMMIT_SHA} \
          --firmware_file=output/trusted_applet.elf \
          --firmware_type=TRUSTED_APPLET \
          --tamago_version=${_TAMAGO_VERSION} \
          --raw \
          --output_file=output/trusted_applet_manifest_unsigned.json
  # Sign the log entry.
  - name: golang
    args:
      - go
      - run
      - github.com/transparency-dev/armored-witness/cmd/sign@${_ARMORED_WITNESS_REPO_VERSION}
      - --project_name=${PROJECT_ID}
      - --release=ci
      - --artefact=applet
      - --manifest_file=output/trusted_applet_manifest_unsigned.json
      - --output_file=output/trusted_applet_manifest
  # Print the content of the signed manifest.
  - name: bash
    args:
      - cat
      - output/trusted_applet_manifest
  ### Write the firmware release to the transparency log.
  # Copy the log entry to the sequence bucket, preparing to write to log.
  - name: gcr.io/cloud-builders/gcloud
    args:
      - storage
      - cp
      - output/trusted_applet_manifest
      - gs://${_LOG_NAME}/${_ENTRIES_DIR}/trusted_applet_manifest
  # Sequence log entry.
  - name: gcr.io/cloud-builders/gcloud
    args:
      - functions
      - call
      - sequence
      - --data
      - '{"entriesDir": "${_ENTRIES_DIR}", "origin": "${_ORIGIN}", "bucket": "${_LOG_NAME}", "kmsKeyName": "ft-log-ci", "kmsKeyRing": "firmware-release-ci", "kmsKeyVersion": 1, "kmsKeyLocation": "global", "noteKeyName": "transparency.dev-aw-ftlog-ci"}'
  # Integrate log entry.
  - name: gcr.io/cloud-builders/gcloud
    args:
      - functions
      - call
      - integrate
      - --data
      - '{"origin": "${_ORIGIN}", "bucket": "${_LOG_NAME}", "kmsKeyName": "ft-log-ci", "kmsKeyRing": "firmware-release-ci", "kmsKeyVersion": 1, "kmsKeyLocation": "global", "noteKeyName": "transparency.dev-aw-ftlog-ci"}'
substitutions:
  # Build-related.
  _FIRMWARE_BUCKET: armored-witness-firmware-ci
  _FIRMWARE_COMPONENT: trusted-applet
  _TAMAGO_VERSION: '1.20.6'
  _ARMORED_WITNESS_REPO_VERSION: d37d6b19ec4dbd1cad3586ae8ba3ec913829d718
  # Log-related.
  _ENTRIES_DIR: firmware-log-sequence
  _ORIGIN: transparency.dev/armored-witness/firmware_transparency/ci/0
  _LOG_NAME: armored-witness-firmware-log-ci
  _LOG_BASE_URL: https://storage.mtls.cloud.google.com/armored-witness-firmware-log-ci/
  _BIN_BASE_URL: https://storage.mtls.cloud.google.com/armored-witness-firmware-ci/
  _LOG_PUBLIC_KEY: transparency.dev-aw-ftlog-ci+f5479c1e+AR6gW0mycDtL17iM2uvQUThJsoiuSRirstEj9a5AdCCu
  _APPLET_PUBLIC_KEY: transparency.dev-aw-applet-ci+3ff32e2c+AV1fgxtByjXuPjPfi0/7qTbEBlPGGCyxqr6ZlppoLOz3
  _OS_PUBLIC_KEY1: transparency.dev-aw-os1-ci+7a0eaef3+AcsqvmrcKIbs21H2Bm2fWb6oFWn/9MmLGNc6NLJty2eQ
  _OS_PUBLIC_KEY2: transparency.dev-aw-os2-ci+af8e4114+AbBJk5MgxRB+68KhGojhUdSt1ts5GAdRIT1Eq9zEkgQh
