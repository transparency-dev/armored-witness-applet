steps:
  ### Build the Trusted Applet and upload it to GCS.
  # Build an image containing the trusted applet artifacts with the Dockerfile.
  - name: gcr.io/cloud-builders/docker
    args:
      - build
      - --build-arg=TAMAGO_VERSION=${_TAMAGO_VERSION}
      - --build-arg=FT_LOG_URL=${_LOG_BASE_URL}
      - --build-arg=FT_BIN_URL=${_BIN_BASE_URL}
      - --build-arg=LOG_ORIGIN=${_ORIGIN}
      - --build-arg=LOG_PUBLIC_KEY=${_LOG_PUBLIC_KEY}
      - --build-arg=APPLET_PUBLIC_KEY=${_APPLET_PUBLIC_KEY}
      - --build-arg=OS_PUBLIC_KEY1=${_OS_PUBLIC_KEY1}
      - --build-arg=OS_PUBLIC_KEY2=${_OS_PUBLIC_KEY2}
      - --build-arg=REST_DISTRIBUTOR_BASE_URL=${_REST_DISTRIBUTOR_BASE_URL}
      - --build-arg=BEE=${_BEE}
      - -t
      - builder-image
      # Path is relative to the root of the repo.
      - .
  # Prepare a container with a copy of the artifacts.
  - name: gcr.io/cloud-builders/docker
    args:
      - create
      - --name
      - builder_scratch
      - builder-image
  # Copy the artifacts from the container to the Cloud Build VM.
  - name: gcr.io/cloud-builders/docker
    args:
      - cp
      - builder_scratch:/build/bin
      - output
  # List the artifacts.
  - name: bash
    args:
      - ls
      - output
  # Copy the artifacts from the Cloud Build VM to GCS.
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - gcloud
      - storage
      - cp
      - output/trusted_applet.elf
      - gs://${_FIRMWARE_BUCKET}/$(sha256sum output/trusted_applet.elf | cut -f1 -d" ")
  ### Construct log entry / Claimant Model statement.
  - name: golang
    args:
      - go
      - run
      - github.com/transparency-dev/armored-witness/cmd/manifest@main
      - create
      - --git_tag=${TAG_NAME}
      - --git_commit_fingerprint=${COMMIT_SHA}
      - --firmware_file=output/trusted_applet.elf
      - --firmware_type=TRUSTED_APPLET
      - --tamago_version=${_TAMAGO_VERSION}
      - --raw
      - --output_file=output/trusted_applet_manifest_unsigned.json
  # Sign the log entry.
  - name: golang
    args:
      - go
      - run
      - github.com/transparency-dev/armored-witness/cmd/sign@main
      - --project_name=${PROJECT_ID}
      - --release=prod
      - --artefact=applet
      - --manifest_file=output/trusted_applet_manifest_unsigned.json
      - --output_file=output/trusted_applet_manifest
  # Print the content of the signed manifest.
  - name: bash
    args:
      - cat
      - output/trusted_applet_manifest
  ### Copy the signed manifest to the public artifacts bucket.
  - name: gcr.io/cloud-builders/gcloud
    args:
      - storage
      - cp
      - output/trusted_applet_manifest
      - gs://${_FIRMWARE_BUCKET}/${_FIRMWARE_COMPONENT}/${TAG_NAME}/trusted_applet_manifest
  ### Write the firmware release to the transparency log.
  # Copy the log entry to the sequence bucket, preparing to write to log.
  #
  # Use the SHA256 of the manifest as the name of the manifest. This allows
  # multiple triggers to run without colliding.
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        gcloud storage cp output/trusted_applet_manifest \
        gs://${_LOG_NAME}/${_ENTRIES_DIR}/$(sha256sum output/trusted_applet_manifest | cut -f1 -d" ")/trusted_applet_manifest
  # Sequence log entry.
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - >
        gcloud functions call sequence \

        --data="{
          \"entriesDir\": \"${_ENTRIES_DIR}/$(sha256sum output/trusted_applet_manifest | cut -f1 -d" ")\",
          \"origin\": \"${_ORIGIN}\",
          \"bucket\": \"${_LOG_NAME}\",
          \"kmsKeyName\": \"ft-log-prod\",
          \"kmsKeyRing\": \"firmware-release-prod\",
          \"kmsKeyVersion\": 1,
          \"kmsKeyLocation\": \"global\",
          \"noteKeyName\": \"transparency.dev-aw-ftlog-prod\",
          \"checkpointCacheControl\": \"${_CHECKPOINT_CACHE}\"
        }"
  # Integrate log entry.
  - name: gcr.io/cloud-builders/gcloud
    args:
      - functions
      - call
      - integrate
      - --data
      - >-
        {
          "origin": "${_ORIGIN}",
          "bucket": "${_LOG_NAME}",
          "kmsKeyName": "ft-log-prod",
          "kmsKeyRing": "firmware-release-prod",
          "kmsKeyVersion": ${_KEY_VERSION},
          "kmsKeyLocation": "global",
          "noteKeyName": "transparency.dev-aw-ftlog-prod",
          "checkpointCacheControl": "${_CHECKPOINT_CACHE}"
        }
  # Clean up the file we added to the _ENTRIES_DIR bucket now that it's been
  # integrated to the log.
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        gcloud storage rm \
        gs://${_LOG_NAME}/${_ENTRIES_DIR}/$(sha256sum output/trusted_applet_manifest | cut -f1 -d" ")/trusted_applet_manifest
substitutions:
  # Build-related.
  _FIRMWARE_BUCKET: armored-witness-firmware
  _FIRMWARE_COMPONENT: trusted-applet
  _TAMAGO_VERSION: '1.21.5'
  # Log-related.
  _ENTRIES_DIR: firmware-log-sequence
  # This must correspond with the trailing number on the _FIRMWARE_BUCKET, _ORIGIN, _LOG_NAME values.
  _KEY_VERSION: '1'
  _ORIGIN: transparency.dev/armored-witness/firmware_transparency/prod/1
  _LOG_NAME: armored-witness-firmware-log
  _LOG_BASE_URL: https://api.transparency.dev/armored-witness-firmware/prod/log/1/
  _BIN_BASE_URL: https://api.transparency.dev/armored-witness-firmware/prod/artefacts/1/
  _LOG_PUBLIC_KEY: transparency.dev-aw-ftlog-prod+1d0792e5+Aa3qdhefd2cc/98jV3blslJT2L+iFR8WKHeGcgFmyjnt
  _APPLET_PUBLIC_KEY: transparency.dev-aw-applet-prod+f022187a+AZSnFa8GxH+jHV6ahELk6peqVObbPKrYAdYyMjrzNF35
  _OS_PUBLIC_KEY1: transparency.dev-aw-os-prod+03170554+AV7mmRamQp6VC9CutzSXzqtNhYNyNmQQRcLX07F6qlC1
  _OS_PUBLIC_KEY2: TODO
  _REST_DISTRIBUTOR_BASE_URL: https://api.transparency.dev
  _BEE: 1
  _CHECKPOINT_CACHE: 'public, max-age=30'
